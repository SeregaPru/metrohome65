using System;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Reflection;
using Fleux.Core.NativeHelpers;


namespace MetroHome65.Routines
{
    /// <summary>
    /// Wrapper class for drawing transparent images
    /// </summary>
    public class AlphaImage
    {
        private String _imagePath = "";

        private readonly Fleux.Core.ResourceManager _resourceManager = Fleux.Core.ResourceManager.Instance;
        private IImageWrapper _imgWrapper;

        ~AlphaImage()
        {
            if (_imgWrapper != null)
                _imgWrapper.Dispose();
        }

        public AlphaImage(String imagePath)
        {
            ImagePath = imagePath;
        }

        public AlphaImage(String resourcePath, Assembly assembly)
        {
            _imgWrapper = _resourceManager.GetIImageFromEmbeddedResource(resourcePath, assembly);
        }

        public String ImagePath
        {
            get { return _imagePath; }
            set
            {
                if (_imagePath != value)
                {
                    _imagePath = value;
                    try
                    {
                        if (_imgWrapper != null)
                            _imgWrapper.Dispose();

                        if (!String.IsNullOrEmpty(_imagePath))
                        {
                            _imgWrapper = _resourceManager.GetIImage(_imagePath);

                            CheckHasAlpha();
                        }
                        else
                            _imgWrapper = null;
                    }
                    catch
                    {
                        //!! write to log  (e.StackTrace, "SetBtnImg")
                    }
                }
            }
        }


        // flag if image has alpha channel
        private bool _hasAlphaChannel = false;
        public bool HasAlphaChannel { get { return _hasAlphaChannel; } }

        private void CheckHasAlpha()
        {
            _hasAlphaChannel = (_imgWrapper.Info.pixelFormat == PixelFormatID.PixelFormat32bppARGB);
        }


        public void PaintIcon(Graphics g, Rectangle rect)
        {
            // draw icon from external image file
            if (_imgWrapper != null)
            {
                try
                {
                    var imageInfo = _imgWrapper.Info;
                    var hdc = g.GetHdc();
                    var location = new Point(
                        (rect.Left + rect.Right - (int)imageInfo.Width) / 2,
                        rect.Top + (rect.Height - (int)imageInfo.Height) / 2);
                    _imgWrapper.Draw(hdc, location, rect);
                    g.ReleaseHdc(hdc);
                }
                catch
                {
                    //!! write to log  (e.StackTrace, "PaintIcon")
                }
            }
        }


        /// <summary>
        /// Paints image as backgroud for rect.
        /// </summary>
        /// <param name="g"></param>
        /// <param name="rect"></param>
        public void PaintBackground(Graphics g, Rectangle rect)
        {
            // if button image is set, draw button image
            if (_imgWrapper != null)
            {
                try
                {
                    IntPtr hdc = g.GetHdc();
                    _imgWrapper.Draw(hdc, rect, rect);
                    g.ReleaseHdc(hdc);
                }
                catch
                {
                    //!! write to log  (e.StackTrace, "PaintBackground")
                }
            }
        }

        public void PaintBackgroundAlpha(Graphics g, Rectangle rect, byte alpha)
        {
            //!! see _factory.CreateBitmapFromImage

            var buffer = new Bitmap(rect.Width, rect.Height, System.Drawing.Imaging.PixelFormat.Format32bppRgb);
            var buffergx = Graphics.FromImage(buffer);
            buffergx.Clear(Color.Black);

            var bufferRect = new Rectangle(0, 0, rect.Width, rect.Height);
            if (_imgWrapper != null)
            {
                IntPtr hdcBuffer = buffergx.GetHdc();
                try
                {
                    _imgWrapper.Draw(hdcBuffer, rect, bufferRect);
                    buffergx.ReleaseHdc(hdcBuffer);
                }
                catch
                { }

                var hdcDst = g.GetHdc();
                hdcBuffer = buffergx.GetHdc();
                var blendFunction = new BlendFunction
                                        {
                                            BlendOp = (byte) BlendOperation.AcSrcOver,
                                            BlendFlags = (byte) BlendFlags.Zero,
                                            SourceConstantAlpha = alpha,
                                            AlphaFormat = (byte) (_hasAlphaChannel ? AlphaFormat.AcSrcAlpha : 0)
                                        };
                // Only supported blend operation
                // Documentation says put 0 here
                // Constant alpha factor

                DrawingAPI.AlphaBlend(hdcDst, rect.Left, rect.Top, rect.Width, rect.Height, hdcBuffer,
                    0, 0, rect.Width, rect.Height, blendFunction);

                g.ReleaseHdc(hdcDst);          // Required cleanup to GetHdc()
                buffergx.ReleaseHdc(hdcBuffer);       // Required cleanup to GetHdc()
            }

        }


        public static void DrawAlphaImage(Graphics g, Image img, Rectangle rect, byte alpha, bool hasAlphaChannel)
        {
            IntPtr hdcDst = g.GetHdc();
            Graphics gSrc = Graphics.FromImage(img);
            IntPtr hdcSrc = gSrc.GetHdc();

            var blendFunction = new BlendFunction
                                    {
                                        BlendOp = (byte) BlendOperation.AcSrcOver,
                                        BlendFlags = (byte) BlendFlags.Zero,
                                        SourceConstantAlpha = alpha,
                                        AlphaFormat = (byte) (hasAlphaChannel ? AlphaFormat.AcSrcAlpha : 0)
                                    };
            // Only supported blend operation
            // Documentation says put 0 here
            // Constant alpha factor

            DrawingAPI.AlphaBlend(hdcDst, rect.Left, rect.Top, rect.Width, rect.Height, hdcSrc,
                0, 0, img.Width, img.Height, blendFunction);

            g.ReleaseHdc(hdcDst);          // Required cleanup to GetHdc()
            gSrc.ReleaseHdc(hdcSrc);       // Required cleanup to GetHdc()
        }
    }


    // These structures, enumerations and p/invoke signatures come from
    // wingdi.h in the Windows Mobile 5.0 Pocket PC SDK

    public struct BlendFunction
    {
        public byte BlendOp;
        public byte BlendFlags;
        public byte SourceConstantAlpha;
        public byte AlphaFormat;
    }

    public enum BlendOperation : byte
    {
        AcSrcOver = 0x00
    }

    public enum BlendFlags : byte
    {
        Zero = 0x00
    }

    public enum SourceConstantAlpha : byte
    {
        Transparent = 0x00,
        Opaque = 0xFF
    }

    public enum AlphaFormat : byte
    {
        AcSrcAlpha = 0x01
    }

    public class DrawingAPI
    {
        [DllImport("coredll.dll")]
        extern public static bool AlphaBlend(IntPtr hdcDest, Int32 nXDest, Int32 nYDest, Int32 nWidthDst, Int32 nHeightDst, IntPtr hdcSrc, Int32 nXSrc, Int32 nYSrc, Int32 nWidthSrc, Int32 nHeightSrc, BlendFunction blendFunction);

        [DllImport("coredll.dll")]
        extern public static bool BitBlt(IntPtr hdcDest, Int32 nXDest, Int32 nYDest, Int32 nWidth, Int32 nHeight, IntPtr hdcSrc, Int32 nXSrc, Int32 nYSrc, UInt32 dwRop);

        public const UInt32 SRCCOPY = 0x00CC0020;
    }


}
